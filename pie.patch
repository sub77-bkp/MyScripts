From da59b3436816e061a51f47102ff5c916bc182da0 Mon Sep 17 00:00:00 2001
From: Kyle Repinski <repinski23@gmail.com>
Date: Tue, 2 Dec 2014 17:09:37 -0200
Subject: [PATCH] bionic: conditionally revert requirement of PIE binaries

Signed-off-by: Humberto Borba <humberos@gmail.com>
Change-Id: I847cc4f45f41c8913bcb811bca412fa6d1ca8685
---
 linker/Android.mk |  4 ++++
 linker/linker.cpp | 47 +++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 51 insertions(+)

diff --git a/linker/Android.mk b/linker/Android.mk
index 5853c90..212c6cd 100644
--- a/linker/Android.mk
+++ b/linker/Android.mk
@@ -35,6 +35,10 @@ LOCAL_CONLYFLAGS += \
 LOCAL_CPPFLAGS += \
     -std=gnu++11 \
 
+ifeq ($(TARGET_ENABLE_NON_PIE_SUPPORT),true)
+    LOCAL_CFLAGS += -DENABLE_NON_PIE_SUPPORT
+endif
+
 # We need to access Bionic private headers in the linker.
 LOCAL_CFLAGS += -I$(LOCAL_PATH)/../libc/
 
diff --git a/linker/linker.cpp b/linker/linker.cpp
index cf65705..eb64939 100644
--- a/linker/linker.cpp
+++ b/linker/linker.cpp
@@ -1305,6 +1305,7 @@ static int soinfo_relocate(soinfo* si, ElfW(Rel)* rel, unsigned count, soinfo* n
             *reinterpret_cast<ElfW(Addr)*>(reloc) += sym_addr - rel->r_offset;
             break;
         case R_ARM_COPY:
+#ifndef ENABLE_NON_PIE_SUPPORT
             /*
              * ET_EXEC is not supported so this should not happen.
              *
@@ -1316,6 +1317,50 @@ static int soinfo_relocate(soinfo* si, ElfW(Rel)* rel, unsigned count, soinfo* n
              */
             DL_ERR("%s R_ARM_COPY relocations are not supported", si->name);
             return -1;
+#else
+            if ((si->flags & FLAG_EXE) == 0) {
+                /*
+                * http://infocenter.arm.com/help/topic/com.arm.doc.ihi0044d/IHI0044D_aaelf.pdf
+                *
+                * Section 4.7.1.10 "Dynamic relocations"
+                * R_ARM_COPY may only appear in executable objects where e_type is
+                * set to ET_EXEC.
+                *
+                * TODO: FLAG_EXE is set for both ET_DYN and ET_EXEC executables.
+                * We should explicitly disallow ET_DYN executables from having
+                * R_ARM_COPY relocations.
+                */
+                DL_ERR("%s R_ARM_COPY relocations only supported for ET_EXEC", si->name);
+                return -1;
+            }
+            count_relocation(kRelocCopy);
+            MARK(rel->r_offset);
+            TRACE_TYPE(RELO, "RELO %08x <- %d @ %08x %s", reloc, s->st_size, sym_addr, sym_name);
+            if (reloc == sym_addr) {
+                ElfW(Sym)* src = soinfo_do_lookup(NULL, sym_name, &lsi, needed);
+
+                if (src == NULL) {
+                    DL_ERR("%s R_ARM_COPY relocation source cannot be resolved", si->name);
+                    return -1;
+                }
+                if (lsi->has_DT_SYMBOLIC) {
+                    DL_ERR("%s invalid R_ARM_COPY relocation against DT_SYMBOLIC shared "
+                           "library %s (built with -Bsymbolic?)", si->name, lsi->name);
+                    return -1;
+                }
+                if (s->st_size < src->st_size) {
+                    DL_ERR("%s R_ARM_COPY relocation size mismatch (%d < %d)",
+                           si->name, s->st_size, src->st_size);
+                    return -1;
+                }
+                memcpy(reinterpret_cast<void*>(reloc),
+                       reinterpret_cast<void*>(src->st_value + lsi->load_bias), src->st_size);
+            } else {
+                DL_ERR("%s R_ARM_COPY relocation target cannot be resolved", si->name);
+                return -1;
+            }
+            break;
+#endif
 #elif defined(__i386__)
         case R_386_JMP_SLOT:
             count_relocation(kRelocAbsolute);
@@ -2177,11 +2222,13 @@ static ElfW(Addr) __linker_init_post_relocation(KernelArgumentBlock& args, ElfW(
     si->dynamic = NULL;
     si->ref_count = 1;
 
+#ifndef ENABLE_NON_PIE_SUPPORT
     ElfW(Ehdr)* elf_hdr = reinterpret_cast<ElfW(Ehdr)*>(si->base);
     if (elf_hdr->e_type != ET_DYN) {
         __libc_format_fd(2, "error: only position independent executables (PIE) are supported.\n");
         exit(EXIT_FAILURE);
     }
+#endif
 
     // Use LD_LIBRARY_PATH and LD_PRELOAD (but only if we aren't setuid/setgid).
     parse_LD_LIBRARY_PATH(ldpath_env);
